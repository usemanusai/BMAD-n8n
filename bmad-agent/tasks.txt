==================== START: design-n8n-workflow ====================
# Design n8n Workflow Task

## Purpose

Design a complete n8n workflow from business requirements, following safeguard protocols and best practices for reliable workflow architecture.

## Prerequisites

- Clear business requirements or workflow objectives
- Understanding of data sources and destinations
- Knowledge of required integrations and transformations

## Task Instructions

### 0. Documentation Reference Protocol

**MANDATORY FIRST STEP:** Before proceeding with any workflow design decisions, ALWAYS consult the comprehensive n8n documentation in `data#n8n-comprehensive-documentation`. This authoritative reference contains:
- Latest n8n architectural patterns and best practices
- Complete node catalog with capabilities and limitations
- Advanced features including AI nodes, error handling, and enterprise capabilities
- Current deployment models and configuration options
- Security and performance optimization guidelines

Use this documentation to inform all node selections, architectural decisions, and technical recommendations throughout the design process.

### 1. Initial Setup and Safeguard Confirmation

**Confirm Operating Mode:**
- Verify current safeguard mode (default: /SAFE-GUARD-ON)
- Verify diagram mode (default: /DIAGRAMS-ON)
- Explain the step-by-step process with screenshot confirmations

**Gather Requirements:**
- Review business objectives and workflow goals
- Identify data sources, transformations, and destinations
- Understand frequency, triggers, and performance requirements
- Document any specific n8n version constraints or environment details

### 2. Workflow Architecture Design

**Design Principles:**
- Prioritize linear "pass-through" workflow patterns
- Avoid complex multi-input nodes where possible
- Minimize use of distant node references ($('Node Name'))
- Plan for comprehensive error handling

**Create High-Level Flow:**
1. Define workflow trigger (webhook, schedule, manual, etc.)
2. Map data flow through transformation steps
3. Identify required nodes and their sequence
4. Plan error handling and retry mechanisms
5. Define success/failure outputs

**Visual Diagram (when /DIAGRAMS-ON):**
```
[Trigger] → [Data Input] → [Transform 1] → [Transform 2] → [Output] → [Success]
     ↓           ↓             ↓             ↓           ↓
[Error Handler] → [Log Error] → [Notify] → [Cleanup] → [Failure]
```

### 3. Node Selection and Configuration

**For Each Workflow Step:**
1. Select appropriate n8n node type
2. Define node configuration parameters
3. Specify data mapping and transformations
4. Plan error handling for the node
5. Document any custom code or expressions needed

**Safeguard Protocol:**
- Present each node configuration step
- Wait for user screenshot confirmation before proceeding
- Validate node names and parameters against user's n8n version
- Adjust for any UI differences or version-specific changes

### 4. Data Flow Validation

**Linear Flow Verification:**
- Ensure data passes cleanly between nodes
- Validate data structure consistency
- Check for potential data loss or corruption points
- Verify all required transformations are included

**Error Handling Design:**
- Plan error catching at critical points
- Design graceful failure handling
- Include retry mechanisms where appropriate
- Plan logging and notification for failures

### 5. Workflow Documentation

**Create Comprehensive Documentation:**
- Workflow purpose and business objectives
- Complete node-by-node configuration
- Data flow diagrams and explanations
- Error handling procedures
- Testing and validation steps
- Deployment and monitoring guidelines

**Include Version Information:**
- n8n version compatibility notes
- Node version requirements
- Any custom dependencies or configurations

### 6. Implementation Planning

**Step-by-Step Implementation:**
1. Environment preparation checklist
2. Node-by-node creation sequence
3. Configuration validation steps
4. Testing procedures
5. Deployment checklist

**Quality Assurance:**
- Validation against original requirements
- Performance testing considerations
- Security review checklist
- Maintenance and monitoring setup

## Deliverables

1. **Workflow Architecture Document** - Complete technical specification
2. **Visual Flow Diagrams** - Clear representation of workflow structure
3. **Node Configuration Guide** - Detailed setup instructions
4. **Implementation Checklist** - Step-by-step deployment guide
5. **Testing and Validation Plan** - Quality assurance procedures

## Success Criteria

- Workflow meets all business requirements
- Design follows n8n best practices and linear flow principles
- Comprehensive error handling and logging included
- Clear documentation for implementation and maintenance
- Validated against user's specific n8n environment

==================== END: design-n8n-workflow ====================

==================== START: validate-n8n-workflow-logic ====================
# Validate n8n Workflow Logic Task

## Purpose

Validate an existing n8n workflow design against business requirements, technical best practices, and n8n-specific reliability patterns.

## Prerequisites

- Existing workflow design or implementation
- Original business requirements
- Access to workflow documentation or n8n instance

## Task Instructions

### 1. Requirements Validation

**Business Alignment Check:**
- Verify workflow meets all stated business objectives
- Confirm data sources and destinations are correct
- Validate trigger conditions and frequency requirements
- Check output format and delivery requirements

**Functional Completeness:**
- Ensure all required data transformations are included
- Verify integration points are properly configured
- Confirm error handling covers all failure scenarios
- Check that success/failure notifications are appropriate

### 2. Technical Architecture Review

**n8n Best Practices Validation:**
- Confirm linear "pass-through" workflow pattern usage
- Identify any problematic multi-input node configurations
- Check for excessive use of distant node references ($('Node Name'))
- Validate node selection appropriateness for each task

**Performance and Reliability:**
- Review workflow execution efficiency
- Check for potential bottlenecks or timeout issues
- Validate retry mechanisms and error recovery
- Assess resource usage and scalability considerations

### 3. Version Compatibility Check

**n8n Version Validation:**
- Verify all nodes are available in target n8n version
- Check for deprecated node configurations
- Validate expression syntax compatibility
- Confirm UI element names and locations

**Safeguard Protocol Application:**
- Ensure screenshot confirmations are planned for critical steps
- Validate step-by-step implementation approach
- Check for version-specific configuration differences

### 4. Error Handling Assessment

**Comprehensive Error Coverage:**
- Validate error catching at all critical points
- Review error message clarity and usefulness
- Check error logging and notification mechanisms
- Assess graceful failure and recovery procedures

**Edge Case Handling:**
- Review handling of empty or malformed data
- Check timeout and connection failure scenarios
- Validate rate limiting and quota management
- Assess handling of partial failures in batch operations

### 5. Security and Compliance Review

**Security Validation:**
- Review credential management and storage
- Check data encryption and transmission security
- Validate access controls and permissions
- Assess sensitive data handling procedures

**Compliance Considerations:**
- Review data retention and deletion policies
- Check audit logging and traceability
- Validate data privacy and protection measures
- Assess regulatory compliance requirements

### 6. Documentation and Maintainability

**Documentation Quality:**
- Review workflow documentation completeness
- Check configuration and setup instructions
- Validate troubleshooting and maintenance guides
- Assess knowledge transfer and training materials

**Maintainability Assessment:**
- Review workflow complexity and readability
- Check for proper naming conventions and organization
- Validate monitoring and alerting setup
- Assess update and modification procedures

## Validation Checklist

### Critical Issues (Must Fix)
- [ ] Workflow fails to meet core business requirements
- [ ] Critical error handling missing
- [ ] Security vulnerabilities present
- [ ] Version compatibility issues identified

### Important Issues (Should Fix)
- [ ] Performance optimization opportunities
- [ ] Documentation gaps or inaccuracies
- [ ] Non-optimal node configurations
- [ ] Missing monitoring or alerting

### Minor Issues (Consider Fixing)
- [ ] Naming convention inconsistencies
- [ ] Minor efficiency improvements possible
- [ ] Enhanced error messaging opportunities
- [ ] Additional logging or debugging features

## Deliverables

1. **Validation Report** - Comprehensive assessment with findings and recommendations
2. **Issue Priority Matrix** - Categorized list of identified issues
3. **Remediation Plan** - Step-by-step fix recommendations
4. **Best Practices Compliance Score** - Assessment against n8n standards
5. **Updated Documentation** - Corrections and improvements to existing docs

## Success Criteria

- All critical issues identified and documented
- Clear remediation plan provided for each issue
- Workflow validated against business requirements
- Technical best practices compliance confirmed
- Documentation updated and accurate

==================== END: validate-n8n-workflow-logic ====================


==================== START: configure-n8n-environment ====================
# Configure n8n Environment Task

## Purpose

Set up a complete n8n environment with proper Docker configuration, database setup, and custom dependencies to support workflow automation requirements.

## Prerequisites

- Docker and Docker Compose installed
- Basic understanding of containerization
- Access to target deployment environment
- List of required custom dependencies or integrations

## Task Instructions

### 1. Environment Assessment and Planning

**Current State Analysis:**
- Assess existing infrastructure and requirements
- Identify resource requirements (CPU, memory, storage)
- Determine network and security requirements
- Plan for scalability and high availability needs

**Safeguard Protocol:**
- Confirm current safeguard mode (default: /SAFE-GUARD-ON)
- Plan for screenshot confirmations at each major configuration step
- Prepare rollback procedures for each configuration change

### 2. Docker Configuration Setup

**Base n8n Configuration:**
```yaml
version: '3.8'
services:
  n8n:
    image: n8nio/n8n:latest
    container_name: n8n
    restart: unless-stopped
    ports:
      - "5678:5678"
    environment:
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=${N8N_BASIC_AUTH_USER}
      - N8N_BASIC_AUTH_PASSWORD=${N8N_BASIC_AUTH_PASSWORD}
      - N8N_HOST=${N8N_HOST}
      - N8N_PORT=5678
      - N8N_PROTOCOL=https
      - NODE_ENV=production
    volumes:
      - n8n_data:/home/node/.n8n
      - ./custom-nodes:/home/node/.n8n/custom
    depends_on:
      - postgres
```

**Database Configuration:**
```yaml
  postgres:
    image: postgres:13
    container_name: n8n-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
```

### 3. Environment Variables Configuration

**Create .env file:**
```bash
# n8n Configuration
N8N_BASIC_AUTH_USER=admin
N8N_BASIC_AUTH_PASSWORD=your_secure_password
N8N_HOST=your-domain.com
N8N_ENCRYPTION_KEY=your_encryption_key

# Database Configuration
POSTGRES_USER=n8n
POSTGRES_PASSWORD=your_db_password
POSTGRES_DB=n8n

# Additional Configuration
N8N_METRICS=true
N8N_LOG_LEVEL=info
```

**Security Considerations:**
- Generate strong, unique passwords
- Use proper encryption keys
- Configure SSL/TLS certificates
- Set up proper firewall rules

### 4. Custom Dependencies Installation

**Create Custom Dockerfile (if needed):**
```dockerfile
FROM n8nio/n8n:latest

USER root

# Install system dependencies
RUN apk add --no-cache \
    python3 \
    py3-pip \
    build-base \
    python3-dev

# Install Python packages
RUN pip3 install \
    pandas \
    requests \
    beautifulsoup4

# Install additional npm packages
RUN npm install -g \
    moment \
    lodash

USER node
```

**Custom Node Installation:**
- Plan for custom node requirements
- Set up volume mounts for custom nodes
- Configure node installation procedures
- Test custom node functionality

### 5. Network and Security Configuration

**Network Setup:**
```yaml
networks:
  n8n-network:
    driver: bridge

services:
  n8n:
    networks:
      - n8n-network
  postgres:
    networks:
      - n8n-network
```

**Security Hardening:**
- Configure reverse proxy (nginx/traefik)
- Set up SSL certificates
- Configure authentication and authorization
- Implement network security policies
- Set up backup and monitoring

### 6. Monitoring and Logging

**Logging Configuration:**
```yaml
  n8n:
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
```

**Monitoring Setup:**
- Configure health checks
- Set up performance monitoring
- Plan alerting and notification systems
- Implement backup and recovery procedures

### 7. Testing and Validation

**Environment Testing:**
1. Verify n8n startup and accessibility
2. Test database connectivity
3. Validate custom dependencies
4. Check security configurations
5. Test backup and recovery procedures

**Performance Validation:**
- Load testing with sample workflows
- Resource usage monitoring
- Network connectivity testing
- Security penetration testing

## Safeguard Checkpoints

**Critical Confirmation Points:**
1. **Before Docker Compose Up:** Screenshot of final docker-compose.yml
2. **After Initial Startup:** Screenshot of n8n login screen
3. **Database Connection:** Screenshot of successful database connection
4. **Custom Dependencies:** Screenshot of successful custom node installation
5. **Security Configuration:** Screenshot of SSL/authentication setup

## Deliverables

1. **Complete docker-compose.yml** - Production-ready configuration
2. **Environment Configuration** - .env file and security settings
3. **Custom Dockerfile** - If custom dependencies required
4. **Deployment Guide** - Step-by-step setup instructions
5. **Monitoring and Backup Plan** - Operational procedures
6. **Security Checklist** - Security validation and hardening steps

## Success Criteria

- n8n environment successfully deployed and accessible
- All custom dependencies installed and functional
- Security configurations properly implemented
- Monitoring and logging operational
- Backup and recovery procedures tested
- Documentation complete and accurate

==================== END: configure-n8n-environment ====================


==================== START: troubleshoot-n8n-platform ====================
# Troubleshoot n8n Platform Task

## Purpose

Diagnose and resolve platform-level issues in n8n environments, including container problems, database connectivity, performance issues, and integration failures.

## Prerequisites

- Access to n8n environment and logs
- Understanding of the current n8n configuration
- Knowledge of the specific issue or symptoms
- Administrative access to the deployment environment

## Task Instructions

### 1. Issue Assessment and Information Gathering

**Symptom Analysis:**
- Document the specific issue or error messages
- Identify when the problem started occurring
- Determine if the issue is intermittent or persistent
- Assess the scope and impact of the problem

**Environment Information:**
- n8n version and deployment method
- Operating system and container runtime
- Database type and version
- Network configuration and external dependencies
- Recent changes or updates

**Safeguard Protocol:**
- Confirm current safeguard mode (default: /SAFE-GUARD-ON)
- Plan for screenshot confirmations of diagnostic steps
- Prepare rollback procedures before making changes

### 2. Common Issue Categories and Diagnostics

**Container and Startup Issues:**
```bash
# Check container status
docker ps -a | grep n8n
docker logs n8n --tail 100

# Check resource usage
docker stats n8n

# Verify volume mounts
docker inspect n8n | grep -A 10 "Mounts"
```

**Database Connectivity Issues:**
```bash
# Test database connection
docker exec -it n8n-postgres psql -U n8n -d n8n -c "SELECT version();"

# Check database logs
docker logs n8n-postgres --tail 50

# Verify database configuration
docker exec -it n8n env | grep POSTGRES
```

**Performance and Resource Issues:**
```bash
# Monitor system resources
top -p $(docker inspect -f '{{.State.Pid}}' n8n)

# Check disk usage
df -h
docker system df

# Analyze memory usage
docker exec -it n8n cat /proc/meminfo
```

### 3. Network and Connectivity Troubleshooting

**Network Diagnostics:**
```bash
# Check port accessibility
netstat -tlnp | grep 5678
curl -I http://localhost:5678

# Test external connectivity
docker exec -it n8n ping google.com
docker exec -it n8n nslookup your-api-endpoint.com
```

**SSL/TLS Issues:**
```bash
# Check certificate validity
openssl s_client -connect your-domain.com:443 -servername your-domain.com

# Verify reverse proxy configuration
nginx -t
docker logs nginx --tail 50
```

### 4. Workflow Execution Issues

**Execution Diagnostics:**
- Review workflow execution logs
- Check for timeout or memory issues
- Validate node configurations and credentials
- Test individual nodes in isolation

**Common Workflow Problems:**
- Node version compatibility issues
- Credential configuration problems
- Rate limiting and API quota issues
- Data transformation and mapping errors

### 5. Custom Dependencies and Node Issues

**Custom Node Troubleshooting:**
```bash
# Check custom node installation
docker exec -it n8n ls -la /home/node/.n8n/custom/

# Verify npm package installation
docker exec -it n8n npm list -g

# Check for node compilation errors
docker logs n8n | grep -i error
```

**Dependency Conflicts:**
- Review package.json for version conflicts
- Check for missing system dependencies
- Validate custom Dockerfile configurations
- Test dependency installation in isolation

### 6. Security and Authentication Issues

**Authentication Troubleshooting:**
- Verify basic auth configuration
- Check OAuth and SSO configurations
- Review user permissions and access controls
- Validate credential encryption and storage

**Security Diagnostics:**
```bash
# Check file permissions
docker exec -it n8n ls -la /home/node/.n8n/

# Verify encryption key configuration
docker exec -it n8n env | grep ENCRYPTION

# Review security headers
curl -I https://your-n8n-domain.com
```

### 7. Backup and Recovery Issues

**Backup Validation:**
- Test backup procedures and schedules
- Verify backup integrity and completeness
- Check backup storage accessibility
- Validate recovery procedures

**Data Recovery:**
```bash
# Database backup
docker exec -it n8n-postgres pg_dump -U n8n n8n > backup.sql

# Workflow export
docker exec -it n8n n8n export:workflow --all --output=/tmp/workflows.json
```

### 8. Systematic Troubleshooting Approach

**Step-by-Step Diagnosis:**
1. **Identify Symptoms** - Document exact error messages and behaviors
2. **Check Logs** - Review all relevant log files for error patterns
3. **Verify Configuration** - Confirm all configuration settings are correct
4. **Test Components** - Isolate and test individual components
5. **Check Dependencies** - Verify all external dependencies are accessible
6. **Resource Analysis** - Monitor system resources and performance
7. **Network Testing** - Validate network connectivity and security
8. **Incremental Testing** - Make small changes and test incrementally

### 9. Resolution and Prevention

**Issue Resolution:**
- Implement fixes based on diagnostic findings
- Test solutions in staging environment first
- Document changes and their impact
- Verify resolution with comprehensive testing

**Prevention Measures:**
- Implement monitoring and alerting
- Establish regular maintenance procedures
- Create runbooks for common issues
- Set up automated health checks

## Troubleshooting Checklist

### Environment Health
- [ ] Container status and resource usage normal
- [ ] Database connectivity and performance good
- [ ] Network connectivity and DNS resolution working
- [ ] SSL/TLS certificates valid and properly configured

### Application Health
- [ ] n8n service starting and responding correctly
- [ ] Workflow execution functioning normally
- [ ] Custom nodes and dependencies working
- [ ] Authentication and authorization functioning

### Performance and Security
- [ ] System resources within acceptable limits
- [ ] Security configurations properly implemented
- [ ] Backup and recovery procedures working
- [ ] Monitoring and alerting operational

## Deliverables

1. **Diagnostic Report** - Comprehensive analysis of the issue
2. **Resolution Plan** - Step-by-step fix implementation
3. **Root Cause Analysis** - Understanding of why the issue occurred
4. **Prevention Recommendations** - Measures to prevent recurrence
5. **Updated Documentation** - Runbooks and troubleshooting guides
6. **Monitoring Improvements** - Enhanced monitoring and alerting setup

## Success Criteria

- Issue successfully identified and resolved
- Root cause understood and documented
- Prevention measures implemented
- System performance restored to normal levels
- Documentation updated with lessons learned

==================== END: troubleshoot-n8n-platform ====================




















==================== END: correct-course ====================

















# PRD Generate Task

## Purpose

- Transform inputs into core product definition documents conforming to a PRD template
- Define clear MVP scope focused on essential functionality
- Provide foundation for Architect and Design Architect to help create technical artifacts which will in turn later draft further details for very junior engineers or simple dev ai agents.

## Instructions

### 1. Review Inputs

Review all provided inputs including project brief, research documents, prd template and user ideas to guide PRD generation.

### 2. Determine Interaction Mode

Confirm with the user their preferred interaction style:

- **Incremental:** Work through sections one at a time via chat messages as defined in the template.

- **YOLO Mode:** Draft the complete PRD making assumptions as necessary. Present full document at once, noting which sections required assumptions.

### 3. Execute Template

- Use the `prd-tmpl` template (or user-specified alternative template)
- Follow all embedded LLM instructions within the template
- Template contains section-specific guidance and examples

### 4. Template Processing Notes

- **Incremental Mode**: Present each section for review before proceeding
- **YOLO Mode**: Generate all sections, then review with user

Process all template elements according to `templates#template-format` conventions.

**CRITICAL: Never display or output template markup formatting, LLM instructions or examples - they MUST be used by you the agent only, AND NEVER shown to users in chat or document output**

**Content Presentation Guidelines:**

- Present only the final, clean content to users
- Replace template variables with actual project-specific content
- Process all conditional logic internally - show only relevant sections
- For Canvas mode: Update the document with clean, formatted content only

### 7. Prepare Handoffs

Based on PRD content, prepare appropriate next-step prompts:

**If UI Component Exists:**

1. Add Design Architect prompt in designated template section
2. Recommend: User engages Design Architect first for UI/UX Specification
3. Then proceed to Architect with enriched PRD

**If No UI Component:**

- Add Architect prompt in designated template section
- Recommend proceeding directly to Architect

### 8. Validate with Checklist

- Run the `pm-checklist` against completed PRD
- Document completion status for each checklist item
- Present summary by section, address any deficiencies
- Generate final checklist report with findings and resolutions

### 9. Final Presentation

**General Guidelines:**

- Present complete documents in clean, full format
- DO NOT truncate unchanged information
- Begin directly with content (no introductory text needed)
- Ensure all template sections are properly filled
- **NEVER show template markup, instructions, or processing directives to users**

## Key Resources

- **Default Template:** `templates#prd-tmpl`
- **Validation:** `checklists#pm-checklist`
- **User Preferences:** `data#technical-preferences`
- **Elicitation Protocol:** `tasks#advanced-elicitation`

## Important Notes

- This task is template-agnostic - users may specify custom templates
- All detailed instructions are embedded in templates, not this task file
- Focus on orchestration and workflow
- **Template markup is for AI processing only - users should never see output indicators from templates#template-format**

==================== END: create-prd ====================


==================== START: create-uxui-spec ====================
# Create UI/UX Specification Task

## Purpose

To collaboratively work with the user to define and document the User Interface (UI) and User Experience (UX) specifications for the project. This involves understanding user needs, defining information architecture, outlining user flows, and ensuring a solid foundation for visual design and frontend development. The output will populate a new document called `front-end-spec.md` following the `front-end-spec-tmpl` template.

## Inputs

- Project Brief (`project-brief.md` or equivalent)
- Product Requirements Document (PRD) (`prd.md` or equivalent)
- User feedback or research (if available)

## Key Activities & Instructions

### 1. Understand Core Requirements

- Review Project Brief and PRD to grasp project goals, target audience, key features, and any existing constraints.
- Ask clarifying questions about user needs, pain points, and desired outcomes.

### 2. Define Overall UX Goals & Principles (for `front-end-spec-tmpl`)

- Collaboratively establish and document:
  - Target User Personas (elicit details or confirm existing ones).
  - Key Usability Goals.
  - Core Design Principles for the project.

### 3. Develop Information Architecture (IA) (for `front-end-spec-tmpl`)

- Work with the user to create a Site Map or Screen Inventory.
- Define the primary and secondary Navigation Structure.
- Use Mermaid diagrams or lists as appropriate for the template.

### 4. Outline Key User Flows (for `front-end-spec-tmpl`)

- Identify critical user tasks from the PRD/brief.
- For each flow:
  - Define the user's goal.
  - Collaboratively map out the steps (use Mermaid diagrams or detailed step-by-step descriptions).
  - Consider edge cases and error states.

### 5. Discuss Wireframes & Mockups Strategy (for `front-end-spec-tmpl`)

- Clarify where detailed visual designs will be created (e.g., Figma, Sketch) and ensure the `front-end-spec-tmpl` correctly links to these primary design files.
- If low-fidelity wireframes are needed first, offer to help conceptualize layouts for key screens.

### 6. Define Component Library / Design System Approach (for `front-end-spec-tmpl`)

- Discuss if an existing design system will be used or if a new one needs to be developed.
- If new, identify a few foundational components to start with (e.g., Button, Input, Card) and their key states/behaviors at a high level. Detailed technical specs will be in `front-end-architecture`.

### 7. Establish Branding & Style Guide Basics (for `front-end-spec-tmpl`)

- If a style guide exists, link to it.
- If not, collaboratively define placeholders for: Color Palette, Typography, Iconography, Spacing.

### 8. Specify Accessibility (AX) Requirements (for `front-end-spec-tmpl`)

- Determine the target compliance level (e.g., WCAG 2.1 AA).
- List any known specific AX requirements.

### 9. Define Responsiveness Strategy (for `front-end-spec-tmpl`)

- Discuss and document key Breakpoints.
- Describe the general Adaptation Strategy.

### 10. Output Generation & Iterative Refinement (Guided by `front-end-spec-tmpl`)

- **a. Draft Section:** Incrementally populate one logical section of the `front-end-spec-tmpl` file based on your discussions.
- **b. Present & Incorporate Initial Feedback:** Present the drafted section to the user for review. Discuss, explain and incorporate their initial feedback and revisions directly.
- **c. [Offer Advanced Self-Refinement & Elicitation Options](#offer-advanced-self-refinement--elicitation-options)**

## Offer Advanced Self-Refinement & Elicitation Options

(This section is called when needed prior to this)

Present the user with the following list of 'Advanced Reflective, Elicitation & Brainstorming Actions'. Explain that these are optional steps to help ensure quality, explore alternatives, and deepen the understanding of the current section before finalizing it and moving on. The user can select an action by number, or choose to skip this and proceed to finalize the section.

"To ensure the quality of the current section: **[Specific Section Name]** and to ensure its robustness, explore alternatives, and consider all angles, I can perform any of the following actions. Please choose a number (8 to finalize and proceed):

**Advanced Reflective, Elicitation & Brainstorming Actions I Can Take:**

{Instruction for AI Agent: Display the title of each numbered item below. If the user asks what a specific option means, provide a brief explanation of the action you will take, drawing from detailed descriptions tailored for the context.}

1.  **Critical Self-Review & User Goal Alignment**
2.  **Generate & Evaluate Alternative Design Solutions**
3.  **User Journey & Interaction Stress Test (Conceptual)**
4.  **Deep Dive into Design Assumptions & Constraints**
5.  **Usability & Accessibility Audit Review & Probing Questions**
6.  **Collaborative Ideation & UI Feature Brainstorming**
7.  **Elicit 'Unforeseen User Needs' & Future Interaction Questions**
8.  **Finalize this Section and Proceed.**

After I perform the selected action, we can discuss the outcome and decide on any further revisions for this section."

REPEAT by Asking the user if they would like to perform another Reflective, Elicitation & Brainstorming Action UNIT the user indicates it is time to proceed ot the next section (or selects #8)

==================== END: create-uxui-spec ====================


==================== START: doc-sharding-task ====================
# Doc Sharding Task

You are a Technical Documentation Librarian tasked with granulating large project documents into smaller, organized files. Your goal is to transform monolithic documentation into a well-structured, navigable documentation system.

## Your Task

Transform large project documents into smaller, granular files within the `docs/` directory following the `doc-sharding-tmpl.txt` plan. Create and maintain `docs/index.md` as a central catalog for easier reference and context injection.

## Execution Process

1. If not provided, ask the user which source documents they wish to process (PRD, Main Architecture, Front-End Architecture)
2. Validate prerequisites:

   - Provided `doc-sharding-tmpl.txt` or access to `bmad-agent/doc-sharding-tmpl.txt`
   - Location of source documents to process
   - Write access to the `docs/` directory
   - Output method (file system or chat interface)

3. For each selected document:

   - Follow the structure in `doc-sharding-tmpl.txt`, processing only relevant sections
   - Extract content verbatim without summarization or reinterpretation
   - Create self-contained markdown files for each section or output to chat
   - Use consistent file naming as specified in the plan

4. For `docs/index.md` when working with the file system:

   - Create if absent
   - Add descriptive titles with relative markdown links
   - Organize content logically with brief descriptions
   - Ensure comprehensive cataloging

5. Maintain creation log and provide final report

## Rules

1. Never modify source content during extraction
2. Create files exactly as specified in the sharding plan
3. Seek approval when consolidating content from multiple sources
4. Maintain original context and meaning
5. Keep file names consistent with the plan
6. Update `index.md` for every new file

## Required Input

1. **Source Document Paths** - Path to document(s) to process (PRD, Architecture, or Front-End Architecture)
2. **Documents to Process** - Which documents to shard in this session
3. **Sharding Plan** - Confirm `docs/templates/doc-sharding-tmpl.txt` exists or `doc-sharding-tmpl.txt` has been provided
4. **Output Location** - Confirm Target directory (default: `docs/`) and index.md or in memory chat output

Would you like to proceed with document sharding? Please provide the required input.

==================== END: doc-sharding-task ====================


==================== START: library-indexing-task ====================
# Library Indexing Task

## Purpose

This task maintains the integrity and completeness of the `docs/index.md` file by scanning all documentation files and ensuring they are properly indexed with descriptions.

## Task Instructions

You are now operating as a Documentation Indexer. Your goal is to ensure all documentation files are properly cataloged in the central index.

### Required Steps

1. First, locate and scan:

   - The `docs/` directory and all subdirectories
   - The existing `docs/index.md` file (create if absent)
   - All markdown (`.md`) and text (`.txt`) files in the documentation structure

2. For the existing `docs/index.md`:

   - Parse current entries
   - Note existing file references and descriptions
   - Identify any broken links or missing files
   - Keep track of already-indexed content

3. For each documentation file found:

   - Extract the title (from first heading or filename)
   - Generate a brief description by analyzing the content
   - Create a relative markdown link to the file
   - Check if it's already in the index
   - If missing or outdated, prepare an update

4. For any missing or non-existent files found in index:

   - Present a list of all entries that reference non-existent files
   - For each entry:
     - Show the full entry details (title, path, description)
     - Ask for explicit confirmation before removal
     - Provide option to update the path if file was moved
     - Log the decision (remove/update/keep) for final report

5. Update `docs/index.md`:
   - Maintain existing structure and organization
   - Add missing entries with descriptions
   - Update outdated entries
   - Remove only entries that were confirmed for removal
   - Ensure consistent formatting throughout

### Index Entry Format

Each entry in `docs/index.md` should follow this format:

```markdown
### [Document Title](relative/path/to/file.md)

Brief description of the document's purpose and contents.
```

### Rules of Operation

1. NEVER modify the content of indexed files
2. Preserve existing descriptions in index.md when they are adequate
3. Maintain any existing categorization or grouping in the index
4. Use relative paths for all links
5. Ensure descriptions are concise but informative
6. NEVER remove entries without explicit confirmation
7. Report any broken links or inconsistencies found
8. Allow path updates for moved files before considering removal

### Process Output

The task will provide:

1. A summary of changes made to index.md
2. List of newly indexed files
3. List of updated entries
4. List of entries presented for removal and their status:
   - Confirmed removals
   - Updated paths
   - Kept despite missing file
5. Any other issues or inconsistencies found

### Handling Missing Files

For each file referenced in the index but not found in the filesystem:

1. Present the entry:

   ```markdown
   Missing file detected:
   Title: [Document Title]
   Path: relative/path/to/file.md
   Description: Existing description

   Options:

   1. Remove this entry
   2. Update the file path
   3. Keep entry (mark as temporarily unavailable)

   Please choose an option (1/2/3):
   ```

2. Wait for user confirmation before taking any action
3. Log the decision for the final report

## Required Input

Please provide:

1. Location of the `docs/` directory
2. Confirmation of write access to `docs/index.md`
3. Any specific categorization preferences
4. Any files or directories to exclude from indexing

Would you like to proceed with library indexing? Please provide the required input above.

==================== END: library-indexing-task ====================


==================== START: review-infrastructure ====================
# Infrastructure Review Task

## Purpose

To conduct a thorough review of existing infrastructure to identify improvement opportunities, security concerns, and alignment with best practices. This task helps maintain infrastructure health, optimize costs, and ensure continued alignment with organizational requirements.

## Inputs

- Current infrastructure documentation
- Monitoring and logging data
- Recent incident reports
- Cost and performance metrics
- `infrastructure-checklist.md` (primary review framework)

## Key Activities & Instructions

### 1. Confirm Interaction Mode

- Ask the user: "How would you like to proceed with the infrastructure review? We can work:
  A. **Incrementally (Default & Recommended):** We'll work through each section of the checklist methodically, documenting findings for each item before moving to the next section. This provides a thorough review.
  B. **"YOLO" Mode:** I can perform a rapid assessment of all infrastructure components and present a comprehensive findings report. This is faster but may miss nuanced details."
- Request the user to select their preferred mode and proceed accordingly.

### 2. Prepare for Review

- Gather and organize current infrastructure documentation
- Access monitoring and logging systems for operational data
- Review recent incident reports for recurring issues
- Collect cost and performance metrics
- <critical_rule>Establish review scope and boundaries with the user before proceeding</critical_rule>

### 3. Conduct Systematic Review

- **If "Incremental Mode" was selected:**
  - For each section of the infrastructure checklist:
    - **a. Present Section Focus:** Explain what aspects of infrastructure this section reviews
    - **b. Work Through Items:** Examine each checklist item against current infrastructure
    - **c. Document Current State:** Record how current implementation addresses or fails to address each item
    - **d. Identify Gaps:** Document improvement opportunities with specific recommendations
    - **e. [Offer Advanced Self-Refinement & Elicitation Options](#offer-advanced-self-refinement--elicitation-options)**
    - **f. Section Summary:** Provide an assessment summary before moving to the next section

- **If "YOLO Mode" was selected:**
  - Rapidly assess all infrastructure components
  - Document key findings and improvement opportunities
  - Present a comprehensive review report
  - <important_note>After presenting the full review in YOLO mode, you MAY still offer the 'Advanced Reflective & Elicitation Options' menu for deeper investigation of specific areas with issues.</important_note>

### 4. Generate Findings Report

- Summarize review findings by category (Security, Performance, Cost, Reliability, etc.)
- Prioritize identified issues (Critical, High, Medium, Low)
- Document recommendations with estimated effort and impact
- Create an improvement roadmap with suggested timelines
- Highlight cost optimization opportunities

### 5. BMAD Integration Assessment

- Evaluate how current infrastructure supports other BMAD agents:
  - **Development Support:** Assess how infrastructure enables Frontend Dev (Mira), Backend Dev (Enrique), and Full Stack Dev workflows
  - **Product Alignment:** Verify infrastructure supports PRD requirements from Product Owner (Oli)
  - **Architecture Compliance:** Check if implementation follows Architect (Alphonse) decisions
  - Document any gaps in BMAD integration

### 6. Architectural Escalation Assessment

- **DevOps/Platform → Architect Escalation Review:**
  - Evaluate review findings for issues requiring architectural intervention:
    - **Technical Debt Escalation:**
      - Identify infrastructure technical debt that impacts system architecture
      - Document technical debt items that require architectural redesign vs. operational fixes
      - Assess cumulative technical debt impact on system maintainability and scalability
    - **Performance/Security Issue Escalation:**
      - Identify performance bottlenecks that require architectural solutions (not just operational tuning)
      - Document security vulnerabilities that need architectural security pattern changes
      - Assess capacity and scalability issues requiring architectural scaling strategy revision
    - **Technology Evolution Escalation:**
      - Identify outdated technologies that need architectural migration planning
      - Document new technology opportunities that could improve system architecture
      - Assess technology compatibility issues requiring architectural integration strategy changes
  - **Escalation Decision Matrix:**
    - **Critical Architectural Issues:** Require immediate Architect Agent involvement for system redesign
    - **Significant Architectural Concerns:** Recommend Architect Agent review for potential architecture evolution
    - **Operational Issues:** Can be addressed through operational improvements without architectural changes
    - **Unclear/Ambiguous Issues:** When escalation level is uncertain, consult with user for guidance and decision
  - Document escalation recommendations with clear justification and impact assessment
  - <critical_rule>If escalation classification is unclear or ambiguous, HALT and ask user for guidance on appropriate escalation level and approach</critical_rule>

### 7. Present and Plan

- Prepare an executive summary of key findings
- Create detailed technical documentation for implementation teams
- Develop an action plan for critical and high-priority items
- **Prepare Architectural Escalation Report** (if applicable):
  - Document all findings requiring Architect Agent attention
  - Provide specific recommendations for architectural changes or reviews
  - Include impact assessment and priority levels for architectural work
  - Prepare escalation summary for Architect Agent collaboration
- Schedule follow-up reviews for specific areas
- <important_note>Present findings in a way that enables clear decision-making on next steps and escalation needs.</important_note>

### 8. Execute Escalation Protocol

- **If Critical Architectural Issues Identified:**
  - **Immediate Escalation to Architect Agent:**
    - Present architectural escalation report with critical findings
    - Request architectural review and potential redesign for identified issues
    - Collaborate with Architect Agent on priority and timeline for architectural changes
    - Document escalation outcomes and planned architectural work
- **If Significant Architectural Concerns Identified:**
  - **Scheduled Architectural Review:**
    - Prepare detailed technical findings for Architect Agent review
    - Request architectural assessment of identified concerns
    - Schedule collaborative planning session for potential architectural evolution
    - Document architectural recommendations and planned follow-up
- **If Only Operational Issues Identified:**
  - Proceed with operational improvement planning without architectural escalation
  - Monitor for future architectural implications of operational changes
- **If Unclear/Ambiguous Escalation Needed:**
  - **User Consultation Required:**
    - Present unclear findings and escalation options to user
    - Request user guidance on appropriate escalation level and approach
    - Document user decision and rationale for escalation approach
    - Proceed with user-directed escalation path
- <critical_rule>All critical architectural escalations must be documented and acknowledged by Architect Agent before proceeding with implementation</critical_rule>

## Output

A comprehensive infrastructure review report that includes:

1. **Current state assessment** for each infrastructure component
2. **Prioritized findings** with severity ratings
3. **Detailed recommendations** with effort/impact estimates
4. **Cost optimization opportunities**
5. **BMAD integration assessment**
6. **Architectural escalation assessment** with clear escalation recommendations
7. **Action plan** for critical improvements and architectural work
8. **Escalation documentation** for Architect Agent collaboration (if applicable)

## Offer Advanced Self-Refinement & Elicitation Options

Present the user with the following list of 'Advanced Reflective, Elicitation & Brainstorming Actions'. Explain that these are optional steps to help ensure quality, explore alternatives, and deepen the understanding of the current section before finalizing it and moving on. The user can select an action by number, or choose to skip this and proceed to finalize the section.

"To ensure the quality of the current section: **[Specific Section Name]** and to ensure its robustness, explore alternatives, and consider all angles, I can perform any of the following actions. Please choose a number (8 to finalize and proceed):

**Advanced Reflective, Elicitation & Brainstorming Actions I Can Take:**

1. **Root Cause Analysis & Pattern Recognition**
2. **Industry Best Practice Comparison**
3. **Future Scalability & Growth Impact Assessment**
4. **Security Vulnerability & Threat Model Analysis**
5. **Operational Efficiency & Automation Opportunities**
6. **Cost Structure Analysis & Optimization Strategy**
7. **Compliance & Governance Gap Assessment**
8. **Finalize this Section and Proceed.**

After I perform the selected action, we can discuss the outcome and decide on any further revisions for this section."

REPEAT by Asking the user if they would like to perform another Reflective, Elicitation & Brainstorming Action UNTIL the user indicates it is time to proceed to the next section (or selects #8)

==================== END: review-infrastructure ====================


==================== START: validate-infrastructure ====================
# Infrastructure Validation Task

## Purpose

To comprehensively validate platform infrastructure changes against security, reliability, operational, and compliance requirements before deployment. This task ensures all platform infrastructure meets organizational standards, follows best practices, and properly integrates with the broader BMAD ecosystem.

## Inputs

- Infrastructure Change Request (`docs/infrastructure/{ticketNumber}.change.md`)
- **Infrastructure Architecture Document** (`docs/infrastructure-architecture.md` - from Architect Agent)
- Infrastructure Guidelines (`docs/infrastructure/guidelines.md`)
- Technology Stack Document (`docs/tech-stack.md`)
- `infrastructure-checklist.md` (primary validation framework - 16 comprehensive sections)

## Key Activities & Instructions

### 1. Confirm Interaction Mode

- Ask the user: "How would you like to proceed with platform infrastructure validation? We can work:
  A. **Incrementally (Default & Recommended):** We'll work through each section of the checklist step-by-step, documenting compliance or gaps for each item before moving to the next section. This is best for thorough validation and detailed documentation of the complete platform stack.
  B. **"YOLO" Mode:** I can perform a rapid assessment of all checklist items and present a comprehensive validation report for review. This is faster but may miss nuanced details that would be caught in the incremental approach."
- Request the user to select their preferred mode (e.g., "Please let me know if you'd prefer A or B.").
- Once the user chooses, confirm the selected mode and proceed accordingly.

### 2. Initialize Platform Validation

- Review the infrastructure change documentation to understand platform implementation scope and purpose
- Analyze the infrastructure architecture document for platform design patterns and compliance requirements
- Examine infrastructure guidelines for organizational standards across all platform components
- Prepare the validation environment and tools for comprehensive platform testing
- <critical_rule>Verify the infrastructure change request is approved for validation. If not, HALT and inform the user.</critical_rule>

### 3. Architecture Design Review Gate

- **DevOps/Platform → Architect Design Review:**
  - Conduct systematic review of infrastructure architecture document for implementability
  - Evaluate architectural decisions against operational constraints and capabilities:
    - **Implementation Complexity:** Assess if proposed architecture can be implemented with available tools and expertise
    - **Operational Feasibility:** Validate that operational patterns are achievable within current organizational maturity
    - **Resource Availability:** Confirm required infrastructure resources are available and within budget constraints
    - **Technology Compatibility:** Verify selected technologies integrate properly with existing infrastructure
    - **Security Implementation:** Validate that security patterns can be implemented with current security toolchain
    - **Maintenance Overhead:** Assess ongoing operational burden and maintenance requirements
  - Document design review findings and recommendations:
    - **Approved Aspects:** Document architectural decisions that are implementable as designed
    - **Implementation Concerns:** Identify architectural decisions that may face implementation challenges
    - **Required Modifications:** Recommend specific changes needed to make architecture implementable
    - **Alternative Approaches:** Suggest alternative implementation patterns where needed
  - **Collaboration Decision Point:**
    - If **critical implementation blockers** identified: HALT validation and escalate to Architect Agent for architectural revision
    - If **minor concerns** identified: Document concerns and proceed with validation, noting required implementation adjustments
    - If **architecture approved**: Proceed with comprehensive platform validation
  - <critical_rule>All critical design review issues must be resolved before proceeding to detailed validation</critical_rule>

### 4. Execute Comprehensive Platform Validation Process

- **If "Incremental Mode" was selected:**
  - For each section of the infrastructure checklist (Sections 1-16):
    - **a. Present Section Purpose:** Explain what this section validates and why it's important for platform operations
    - **b. Work Through Items:** Present each checklist item, guide the user through validation, and document compliance or gaps
    - **c. Evidence Collection:** For each compliant item, document how compliance was verified
    - **d. Gap Documentation:** For each non-compliant item, document specific issues and proposed remediation
    - **e. Platform Integration Testing:** For platform engineering sections (13-16), validate integration between platform components
    - **f. [Offer Advanced Self-Refinement & Elicitation Options](#offer-advanced-self-refinement--elicitation-options)**
    - **g. Section Summary:** Provide a compliance percentage and highlight critical findings before moving to the next section

- **If "YOLO Mode" was selected:**
  - Work through all checklist sections rapidly (foundation infrastructure sections 1-12 + platform engineering sections 13-16)
  - Document compliance status for each item across all platform components
  - Identify and document critical non-compliance issues affecting platform operations
  - Present a comprehensive validation report for all sections
  - <important_note>After presenting the full validation report in YOLO mode, you MAY still offer the 'Advanced Reflective & Elicitation Options' menu for deeper investigation of specific sections with issues.</important_note>

### 5. Generate Comprehensive Platform Validation Report

- Summarize validation findings by section across all 16 checklist areas
- Calculate and present overall compliance percentage for complete platform stack
- Clearly document all non-compliant items with remediation plans prioritized by platform impact
- Highlight critical security or operational risks affecting platform reliability
- Include design review findings and architectural implementation recommendations
- Provide validation signoff recommendation based on complete platform assessment
- Document platform component integration validation results

### 6. BMAD Integration Assessment

- Review how platform infrastructure changes support other BMAD agents:
  - **Development Agent Alignment:** Verify platform infrastructure supports Frontend Dev, Backend Dev, and Full Stack Dev requirements including:
    - Container platform development environment provisioning
    - GitOps workflows for application deployment
    - Service mesh integration for development testing
    - Developer experience platform self-service capabilities
  - **Product Alignment:** Ensure platform infrastructure implements PRD requirements from Product Owner including:
    - Scalability and performance requirements through container platform
    - Deployment automation through GitOps workflows
    - Service reliability through service mesh implementation
  - **Architecture Alignment:** Validate that platform implementation aligns with architecture decisions including:
    - Technology selections implemented correctly across all platform components
    - Security architecture implemented in container platform, service mesh, and GitOps
    - Integration patterns properly implemented between platform components
  - Document all integration points and potential impacts on other agents' workflows

### 7. Next Steps Recommendation

- If validation successful:
  - Prepare platform deployment recommendation with component dependencies
  - Outline monitoring requirements for complete platform stack
  - Suggest knowledge transfer activities for platform operations
  - Document platform readiness certification
- If validation failed:
  - Prioritize remediation actions by platform component and integration impact
  - Recommend blockers vs. non-blockers for platform deployment
  - Schedule follow-up validation with focus on failed platform components
  - Document platform risks and mitigation strategies
- If design review identified architectural issues:
  - **Escalate to Architect Agent** for architectural revision and re-design
  - Document specific architectural changes required for implementability
  - Schedule follow-up design review after architectural modifications
- Update documentation with validation results across all platform components
- <important_note>Always ensure the Infrastructure Change Request status is updated to reflect the platform validation outcome.</important_note>

## Output

A comprehensive platform validation report documenting:

1. **Architecture Design Review Results** - Implementability assessment and architectural recommendations
2. **Compliance percentage by checklist section** (all 16 sections including platform engineering)
3. **Detailed findings for each non-compliant item** across foundation and platform components
4. **Platform integration validation results** documenting component interoperability
5. **Remediation recommendations with priority levels** based on platform impact
6. **BMAD integration assessment results** for complete platform stack
7. **Clear signoff recommendation** for platform deployment readiness or architectural revision requirements
8. **Next steps for implementation or remediation** prioritized by platform dependencies

## Offer Advanced Self-Refinement & Elicitation Options

Present the user with the following list of 'Advanced Reflective, Elicitation & Brainstorming Actions'. Explain that these are optional steps to help ensure quality, explore alternatives, and deepen the understanding of the current section before finalizing it and moving on. The user can select an action by number, or choose to skip this and proceed to finalize the section.

"To ensure the quality of the current section: **[Specific Section Name]** and to ensure its robustness, explore alternatives, and consider all angles, I can perform any of the following actions. Please choose a number (8 to finalize and proceed):

**Advanced Reflective, Elicitation & Brainstorming Actions I Can Take:**

1. **Critical Security Assessment & Risk Analysis**
2. **Platform Integration & Component Compatibility Evaluation**
3. **Cross-Environment Consistency Review**
4. **Technical Debt & Maintainability Analysis**
5. **Compliance & Regulatory Alignment Deep Dive**
6. **Cost Optimization & Resource Efficiency Analysis**
7. **Operational Resilience & Platform Failure Mode Testing (Theoretical)**
8. **Finalize this Section and Proceed.**

After I perform the selected action, we can discuss the outcome and decide on any further revisions for this section."

REPEAT by Asking the user if they would like to perform another Reflective, Elicitation & Brainstorming Action UNTIL the user indicates it is time to proceed to the next section (or selects #8)

==================== END: validate-infrastructure ====================
